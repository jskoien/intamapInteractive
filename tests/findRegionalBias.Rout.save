
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(intamapInteractive)
Loading required package: intamap
Loading required package: sp
> 
> data(meuse)
> observations = data.frame(x = meuse$x,y = meuse$y,value = log(meuse$zinc))
> coordinates(observations) = ~x+y
> pBoundaries = spsample(observations, 10, "regular",bb = bbox(observations) +  
+               matrix(c(-400,-400,400,400),ncol=2),offset=c(0,0))
> gridded(pBoundaries) = TRUE
> cs = pBoundaries@grid@cellsize[1]/2
> 
> Srl = list()
> nb = dim(coordinates(pBoundaries))[1]
> for (i in 1:nb) {
+   pt1 = coordinates(pBoundaries)[i,]
+   x1 = pt1[1]-cs
+   x2 = pt1[1]+cs
+   y1 = pt1[2]-cs
+   y2 = pt1[2]+cs
+ 
+   boun = data.frame(x=c(x1,x2,x2,x1,x1),y=c(y1,y1,y2,y2,y1))
+   coordinates(boun) = ~x+y
+   boun = Polygon(boun)
+   Srl[[i]] = Polygons(list(boun),ID = as.character(i))
+ }
> pBoundaries = SpatialPolygonsDataFrame(SpatialPolygons(Srl),
+                                       data = data.frame(ID=c(1:nb)))
> observations$ID = over(observations, geometry(pBoundaries))
> blines = findBoundaryLines(pBoundaries, regCode = "ID")
> rb = findRegionalBias(observations, blines, value~1, regCode = "ID")
interpolating border between  12 9 
[using ordinary kriging]
[using ordinary kriging]
interpolating border between  9 8 
[using ordinary kriging]
[using ordinary kriging]
interpolating border between  8 5 
[using ordinary kriging]
[using ordinary kriging]
interpolating border between  5 2 
[using ordinary kriging]
[using ordinary kriging]
> rb$regionalBias
   ID          ols    ols.std ols.t.value      ols.p          wls    wls.std
x1 12 -0.445941743 0.12577513 -3.54554785 0.07116190 -0.440095920 0.09828582
x2  9 -0.389676005 0.08028035 -4.85394027 0.03991928 -0.383830182 0.06573835
x3  8 -0.029488587 0.08028035 -0.36732013 0.74860681 -0.021996582 0.06706801
x4  5 -0.012276606 0.05762046 -0.21305984 0.85102512 -0.006430783 0.04975117
x5  4  0.099305510 0.08948375  1.10976021 0.38266270  0.081768041 0.07854582
x6  6  0.004935375 0.08028035  0.06147675 0.95657039  0.009135016 0.06706801
x7  2  0.253621817 0.08948375  2.83427780 0.10520370  0.251673209 0.08918710
x8  1  0.519520240 0.09782510  5.31070485 0.03367568  0.509777202 0.09584238
   wls.t.value      wls.p
x1  -4.4777152 0.04642946
x2  -5.8387563 0.02810256
x3  -0.3279743 0.77408292
x4  -0.1292589 0.90897953
x5   1.0410234 0.40718068
x6   0.1362053 0.90413195
x7   2.8218567 0.10598952
x8   5.3189124 0.03357700
> 
> obs2 = removeRegionalBias(observations, rb, value~1, regCode = "ID")
> 
> summary(obs2)
Object of class SpatialPointsDataFrame
Coordinates:
     min    max
x 178605 181390
y 329714 333611
Is projected: NA 
proj4string : [NA]
Number of points: 155
Data attributes:
     value             ID        
 Min.   :4.718   Min.   : 1.000  
 1st Qu.:5.413   1st Qu.: 5.000  
 Median :6.026   Median : 8.000  
 Mean   :6.048   Mean   : 7.735  
 3rd Qu.:6.575   3rd Qu.: 9.000  
 Max.   :7.666   Max.   :12.000  
> 
> proc.time()
   user  system elapsed 
  2.847   0.094   3.223 
