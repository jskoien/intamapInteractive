{
    "collab_server" : "",
    "contents" : "sYamKrige = function(newCor, cmat, Obs, depVar=\"value\", nmax, maxdist, model, inv, ikri){\n# Function for predicting at one location\n  if (!missing(ikri) && ikri %% 100 == 0) print(ikri)\n  \n  c0dist = spDistsN1(coordinates(Obs), newCor)\n  clen = length(c0dist)\n  if (!missing(maxdist) && !is.infinite(maxdist) && !is.null(maxdist)) clen = sum(c0dist < maxdist)\n  if (nmax < clen) clen = nmax\n  iobs = order(c0dist)[1:clen]\n  c0dist = c0dist[iobs]\n  if (c0dist[length(c0dist)] > maxdist)  c0Dist = c0Dist[c0Dist < maxdist]\n  if (!inv) {\n    cmat = cmat[iobs,iobs]\n    dl = dim(cmat)[1]\n    cmat = rbind(cmat,rep(1,dl))\n    cmat = cbind(cmat,rep(1,dl+1) )\n    dl = dl+1\n    cmat[dl,dl] = 0\n    cinv = solve(cmat)\n#    print(dim(cinv))\n  } else cinv = cmat\n  c0arr = variogramLine(model,dist_vector = c0dist)$gamma\n  c0arr[(clen+1)] = 1\n\n  ww = cinv %*% c0arr\n  if (min(ww[1:clen]) < 0) {\n    ww[1:clen] = ww[1:clen]-min(ww[1:clen])\n    ww = ww/sum(ww[1:clen])\n  }\n  var1.pred = ww[1:clen] %*% as.matrix(Obs[iobs,depVar]@data)\n  var1.ok = t(ww) %*% c0arr\n  var1.var = t(ww[1:clen]) %*% ((as.matrix(Obs[iobs,depVar]@data)-as.numeric(var1.pred))^2)\n  return(c(var1.pred=var1.pred,var1.ok=var1.ok,var1.var = var1.var))\n}\n\n\n\nyamamotoKrige = function(formula, Obs, newPoints, model, nsim = 0, nmax = 20, maxdist = Inf) {\n  depVar=as.character(formula[[2]])\n \n  if (nsim >0) {\n  #  mSim = newPoints\n    for (i in 1:nsim) {\n      cat(paste(\"Conditional simulation \",i,\"\\n\"))\n#  cSim = condSim(Obs,newPoints,isim=i,...)\n      cSim = condSimYama(Obs, newPoints, isim=i, model = model, depVar=depVar, nmax = nmax, maxdist = maxdist)\n      if (i ==1) mSim = cSim  else   mSim@data = cbind(mSim@data, cSim@data)\n    } \n    names(mSim) = mapply(FUN = function(i) paste(\"sim\",i,sep=\"\"),seq(1:nsim))\n#    coordinates(mSim) = as.formula(paste(\"~\",names(mSim)[1],\"+\",names(mSim)[2]))\n    return(mSim)\n  }\n  cObs = coordinates(Obs)\n  if (is(newPoints,\"Spatial\")) {\n    cNew = coordinates(newPoints)\n  } else {\n    cNew = newPoints\n  }\n  if (is.null(dim(cNew))) cNew = as.data.frame(cNew)\n#  if (dim(cNew)[2] == 1) cNew = t(cNew)\n  dvar = as.matrix(dist(cObs))\n  cmat = variogramLine(model, dist_vector = dvar)\n  dl = dim(cmat)[1]\n  cmat = rbind(cmat,rep(1,dl))\n  cmat = cbind(cmat,rep(1,dl+1) )\n  dl = dl+1\n  cmat[dl,dl] = 0\n  if (nmax >= dim(Obs)[1]) {\n    cmat = solve(cmat)\n    inv = TRUE\n  } else inv = FALSE\n  ikri = c(1:dl) \n  preds = t(apply(cNew, MARGIN = 1, FUN = sYamKrige, model = model, Obs = Obs, depVar=depVar,\n    cmat = cmat, nmax = nmax, maxdist = maxdist, inv = inv, ikri=ikri))\n  preds = as.data.frame(cbind(preds,cNew))\n  coordinates(preds) = as.formula(paste(\"~\",dimnames(cNew)[2][[1]][1],\"+\",dimnames(cNew)[2][[1]][2]))\n#  print(preds)\n  return(preds)\n}\n\n\n\ncondSimYama = function(Obs, newPoints, isim=1, model, depVar=\"value\", nmax = 25, maxdist = Inf) {\n  if (length(names(Obs)) == 1) depVar = names(Obs)\n  ccObs = coordinates(Obs)\n  nObs = dim(ccObs)[1]\n#  dataObs = matrix(nrow = nObs,ncol = ssim)\n#  dataObs = t(mapply(Obs@data[[val]],FUN = function(X,ssim) c(rep(X,ssim)),MoreArgs = list(ssim)))\n  sim = Obs@data[[depVar]]\n  coords = coordinates(newPoints)\n  nPred = dim(coords)[1]\n  iord = sample(c(1:nPred))\n#  nPred = 100\n  nmax0 = nmax\n  cObs = matrix(ncol = 2,nrow=(nObs+nPred))\n  cObs[1:nObs,] = ccObs\n  iObs = nObs\n  for (inew in 1:nPred) {\n    if ((iObs-nObs+1) %% 100 == 0) cat(paste(\"Simulation number\",isim,\"Simulating point\",iObs-nObs+1,\"of\",nPred,\"\\n\"))\n    cNew = coords[iord[inew],]\n    c0dist = spDistsN1(cObs[1:iObs,],cNew)\n    clen = length(c0dist)\n    clenshort = sum(c0dist < maxdist)\n    nmax = min(nmax0, clenshort)\n    if (nmax < clen) {\n      jord = order(c0dist)\n      c0dist = c0dist[jord[1:nmax]]\n      rObs = cObs[jord[1:nmax],]\n      dObs = sim[jord[1:nmax]]\n    } else {\n      rObs = cObs[1:nObs]\n      dObs = sim\n    }\n    c0arr = variogramLine(model,dist_vector = c0dist)$gamma\n    rvar = as.matrix(dist(rObs))\n    cmat = variogramLine(model,dist_vector = rvar)\n    dl = dim(cmat)[1]\n    clen = dl\n    cmat = rbind(cmat,rep(1,dl))\n    cmat = cbind(cmat,rep(1,dl+1) )\n    dl = dl+1\n    cmat[dl,dl] = 0\n    cinv = solve(cmat)\n    c0arr[dl] = 1\n\n    ww = cinv %*% c0arr\n    if (min(ww[1:clen]) < 0) {\n      ww[1:clen] = ww[1:clen]-min(ww[1:clen])\n      ww = ww/sum(ww[1:clen])\n    }\n    var1.pred = ww[1:clen] %*% as.matrix(dObs)\n    pred.var = t(ww) %*% c0arr\n    var1.var = t(ww[1:clen]) %*% ((as.matrix(dObs)-as.numeric(var1.pred))^2)\n    iObs = iObs + 1\n    cObs[iObs,] = cNew\n#    cObs = rbind(cObs,cNew)\n    sim[iObs] = rnorm(1,var1.pred,sqrt(var1.var))\n\n  }\n\n  sim = sim[(nObs+1):(nObs+nPred)]\n  sim = sim[order(iord)]\n\n  preds = as.data.frame(cbind(coords,sim = sim))\n  coordinates(preds) = as.formula(paste(\"~\",dimnames(as.data.frame(coords))[2][[1]][1],\"+\",dimnames(as.data.frame(coords))[2][[1]][2]))\n#  print(preds)\n  return(preds)\n}\n\n",
    "created" : 1475158669126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3470274481",
    "id" : "1A2A0A29",
    "lastKnownWriteTime" : 1475480549,
    "last_content_update" : 1475480549751,
    "path" : "E:/Intamap/SVNI/intamap/R/yamamoto.R",
    "project_path" : "R/yamamoto.R",
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}